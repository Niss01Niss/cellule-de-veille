const { createClient } = require('@supabase/supabase-js')

// Configuration Supabase (remplacez par vos vraies cl√©s)
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes!')
  console.log('Assurez-vous que NEXT_PUBLIC_SUPABASE_URL et NEXT_PUBLIC_SUPABASE_ANON_KEY sont d√©finies dans .env.local')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function checkDatabase() {
  console.log('üîç V√©rification de la base de donn√©es...\n')

  try {
    // 1. V√©rifier la connexion
    console.log('1. Test de connexion...')
    const { data: testData, error: testError } = await supabase
      .from('cyber_alerts')
      .select('count')
      .limit(1)
    
    if (testError) {
      console.error('‚ùå Erreur de connexion:', testError.message)
      return
    }
    console.log('‚úÖ Connexion r√©ussie\n')

    // 2. V√©rifier les tables
    console.log('2. V√©rification des tables...')
    
    // V√©rifier client_profiles
    const { data: profilesData, error: profilesError } = await supabase
      .from('client_profiles')
      .select('count')
      .limit(1)
    
    if (profilesError) {
      console.error('‚ùå Table client_profiles manquante ou inaccessible:', profilesError.message)
    } else {
      console.log('‚úÖ Table client_profiles accessible')
    }

    // V√©rifier iocs
    const { data: iocsData, error: iocsError } = await supabase
      .from('iocs')
      .select('count')
      .limit(1)
    
    if (iocsError) {
      console.error('‚ùå Table iocs manquante ou inaccessible:', iocsError.message)
    } else {
      console.log('‚úÖ Table iocs accessible')
    }

    // V√©rifier cyber_alerts
    const { data: alertsData, error: alertsError } = await supabase
      .from('cyber_alerts')
      .select('count')
      .limit(1)
    
    if (alertsError) {
      console.error('‚ùå Table cyber_alerts manquante ou inaccessible:', alertsError.message)
    } else {
      console.log('‚úÖ Table cyber_alerts accessible')
    }

    console.log('')

    // 3. V√©rifier la structure de la table iocs
    console.log('3. V√©rification de la structure de la table iocs...')
    const { data: iocsStructure, error: structureError } = await supabase
      .from('iocs')
      .select('*')
      .limit(1)
    
    if (structureError) {
      console.error('‚ùå Erreur lors de la v√©rification de la structure:', structureError.message)
    } else if (iocsStructure && iocsStructure.length > 0) {
      const columns = Object.keys(iocsStructure[0])
      console.log('üìã Colonnes trouv√©es:', columns.join(', '))
      
      if (columns.includes('user_id')) {
        console.log('‚úÖ Colonne user_id pr√©sente')
      } else {
        console.log('‚ùå Colonne user_id manquante!')
      }
    } else {
      console.log('‚ÑπÔ∏è Table iocs vide ou inaccessible')
    }

    console.log('')

    // 4. V√©rifier les politiques RLS
    console.log('4. V√©rification des politiques RLS...')
    
    // Tenter une insertion de test (sera bloqu√©e par RLS si configur√©)
    const { data: testInsert, error: insertError } = await supabase
      .from('client_profiles')
      .insert([{
        user_id: '00000000-0000-0000-0000-000000000000',
        company_name: 'Test Company',
        contact_name: 'Test User'
      }])
      .select()

    if (insertError && insertError.message.includes('row-level security')) {
      console.log('‚úÖ RLS activ√© sur client_profiles')
    } else if (insertError) {
      console.log('‚ö†Ô∏è Erreur lors du test RLS:', insertError.message)
    } else {
      console.log('‚ùå RLS non activ√© sur client_profiles')
    }

    console.log('')

    // 5. Recommandations
    console.log('5. Recommandations:')
    console.log('üìã Si des tables sont manquantes, ex√©cutez le script database/complete-schema.sql')
    console.log('üîê Si RLS n\'est pas activ√©, v√©rifiez les politiques de s√©curit√©')
    console.log('üîß Si la colonne user_id manque, ajoutez-la avec: ALTER TABLE iocs ADD COLUMN user_id UUID REFERENCES auth.users(id)')

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message)
  }
}

// Ex√©cuter le diagnostic
checkDatabase() 